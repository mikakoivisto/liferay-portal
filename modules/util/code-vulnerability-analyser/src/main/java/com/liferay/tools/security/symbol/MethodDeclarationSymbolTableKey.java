package com.liferay.tools.security.symbol;

import java.util.List;

import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.ast.body.TypeDeclaration;
import com.liferay.tools.security.symbol.resolution.ResolvableType;
import com.liferay.tools.security.symbol.resolution.strategy.ResolutionStrategy;
import com.liferay.tools.security.utils.JavaLangUtils;

public class MethodDeclarationSymbolTableKey implements SymbolTableKey {

	private MethodDeclaration _def;
	private ResolutionStrategy _resolver;
	//private List<ResolvableType> _typeArgs;
	//private List<ResolvableType> _params;
	
	private String _cachedSerialization;
	
	
	private TypeDeclarationSymbolTableKey _outerScopeSymbolTableKey;
	
	public MethodDeclarationSymbolTableKey(MethodDeclaration method, ResolutionStrategy resolver, TypeDeclarationSymbolTableKey outerScopeSymbolTableKey) {
		
		_def = method;
		_resolver = resolver;
		_outerScopeSymbolTableKey = outerScopeSymbolTableKey;
	}
	
	public String serialize() {
		
		if (_cachedSerialization != null) return _cachedSerialization;
		
		StringBuffer sb = new StringBuffer();
		
		if (_outerScopeSymbolTableKey != null) {
			sb.append(_outerScopeSymbolTableKey.serialize());
			sb.append('#');
		}
		
		sb.append(JavaLangUtils.serializeMethodDeclaration(_def, _resolver));
		
		_cachedSerialization = sb.toString();
		
		return _cachedSerialization;
	}
	
	@Override
	public int hashCode() {
		return serialize().hashCode();
	}
	
	@Override
	public boolean equals(Object obj) {

		if (obj instanceof MethodDeclarationSymbolTableKey) {
			return serialize().equals(((MethodDeclarationSymbolTableKey)obj).serialize());
		}
		return false;
	}
	
	@Override
	public String toString() {
		return serialize();
	}
}
