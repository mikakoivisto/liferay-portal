package com.liferay.tools.security.symbol.resolution.strategy;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

import org.slf4j.LoggerFactory;

import com.github.javaparser.ast.type.PrimitiveType;
import com.github.javaparser.ast.type.PrimitiveType.Primitive;
import com.github.javaparser.ast.type.Type;
import com.github.javaparser.ast.type.VoidType;
import com.github.javaparser.ast.type.WildcardType;
import com.liferay.tools.security.symbol.SymbolTable;
import com.liferay.tools.security.symbol.UnresolvableSymbolException;
import com.liferay.tools.security.symbol.SymbolTable.ResolutionStrategyOrchestrator;

public class PrimitiveResolutionStrategyImpl implements ResolutionStrategy {

	// TODO: Remove static declaration once resolveSymbol returns a strongly typed object including primitive vs. reference differentiation
	public static final Set<String> primitiveTypes = new HashSet<String>(Arrays.asList(new String[] {
			"int",
			"short",
			"byte",
			"char",
			"double",
			"long",
			"float",
			"boolean",
			"void",
			"?"
	}));

	public String resolveType(String typeReference) throws UnresolvableSymbolException {
		
		if (primitiveTypes.contains(typeReference)) {
			return typeReference;
		}
		
		throw new UnresolvableSymbolException(typeReference);
	}

	/*
	public ResolvableType getResolvableType(String typeReference) throws UnresolvableSymbolException {

		if (primitiveTypes.contains(typeReference)) {
			_log.trace("Resolved as primitive: " + typeReference);
			//return new InlineImplsAwareType(getPrimitiveType(typeReference), _node);
			return new PrimitiveResolvableType(getPrimitiveType(typeReference));
		}

		return null;
	}
	
	private Type getPrimitiveType(String type) throws UnresolvableSymbolException {
		
		if (type.equals("int")) {
			return new PrimitiveType(Primitive.Int);
		} else if (type.equals("short")) {
			return new PrimitiveType(Primitive.Short);
		} else if (type.equals("char")) {
			return new PrimitiveType(Primitive.Char);
		} else if (type.equals("double")) {
			return new PrimitiveType(Primitive.Double);
		} else if (type.equals("long")) {
			return new PrimitiveType(Primitive.Long);
		} else if (type.equals("float")) {
			return new PrimitiveType(Primitive.Float);
		} else if (type.equals("boolean")) {
			return new PrimitiveType(Primitive.Boolean);
		} else if (type.equals("void")) {
			return new VoidType();
		} else if (type.equals("?")) {
			return new WildcardType();
		}
		
		throw new UnresolvableSymbolException(type);
	}
	*/
	
	private final static org.slf4j.Logger _log = LoggerFactory.getLogger(PrimitiveResolutionStrategyImpl.class);
}
