package com.liferay.tools.security;

import org.slf4j.LoggerFactory;

import com.github.javaparser.ast.CompilationUnit;
import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
import com.github.javaparser.ast.body.MethodDeclaration;
import com.github.javaparser.ast.expr.AnnotationExpr;
import com.github.javaparser.ast.stmt.BlockStmt;
import com.liferay.tools.security.symbol.SymbolTable;

/**
 * Simple visitor implementation for visiting MethodDeclaration nodes.
 */
public class TestVisitor extends LiferayCodeVisitor {
	
	protected ClassOrInterfaceDeclaration _currentClass;
	protected MethodDeclaration _currentMethod;
	protected SymbolTable _currentSymbolTable;
	
	public TestVisitor() {
		super();
	}
	
	@Override
	public void visit(CompilationUnit cu, LiferayCodeAnalytics arg) {		
		super.visit(cu, arg);
	}

	@Override
	public void visit(ClassOrInterfaceDeclaration node, LiferayCodeAnalytics arg) {

		_currentClass = node;
    	super.visit(node, arg);
	}
	
	@Override
	public void visit(BlockStmt node, LiferayCodeAnalytics arg) {
		
		//_log.info("ENTERING BlockStm parent:" + node.getParentNode().getClass().getName());
				
		SymbolTable resumeSymbolTable = _currentSymbolTable;
		
		_currentSymbolTable = SymbolTable.getSymbolTable(node);
		
		super.visit(node, arg);
		
		/*
		if (node.getParentNode() instanceof MethodDeclaration) {
			
			_log.info("===========");
			_log.info("SymbolTable");
			//_log.info(
			//		_currentSymbolTable.getParentScope().getParentScope().getNode().getClass().getName()
			//		+ " >> " + _currentSymbolTable.getParentScope().getNode().getClass().getName() 
			//		+ " >> " + _currentSymbolTable.getNode().getClass().getName());
			_log.info("-----------");
			_log.info(_currentSymbolTable.toString());
			_log.info("===========");
		}
		*/
		
		_currentSymbolTable = resumeSymbolTable;
		
		//_log.info("LEAVING BlockStmt");
	}	
	
	@Override
	public void visit(MethodDeclaration node, LiferayCodeAnalytics arg) {
		
		boolean testEntryMethod = false;
		for (AnnotationExpr annotation : node.getAnnotations()) {
			if (annotation.getName().getName().equals("AssertionEntry")) {
				testEntryMethod = true;
			}
		}
		if (!testEntryMethod) return;
		
		
		_log.info("TestVisitor :: Analysing method: " + node.getName());
		
		if (1 == 0 && !node.getName().equals("getGroupEntriesCount")) return;
		
		_currentSymbolTable = SymbolTable.getSymbolTableForMethod(node);
		
		_log.info("");
		_log.info(node.toString());// node.getDeclarationAsString());
				
		_log.info("START ExpressionVisitor");
		//CodeVulnerabilityAnalyser.describeNode(node);
		ExpressionVisitor exprVisitor = new ExpressionVisitor();
		exprVisitor.visit(node, arg);
		_log.info("END ExpressionVisitor");
		
		super.visit(node, arg);
	}
	
	private final static org.slf4j.Logger _log = LoggerFactory.getLogger(TestVisitor.class);
}
